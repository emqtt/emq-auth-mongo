name: Run test cases

on: [push, pull_request]

jobs:
    run_test_cases:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                mongo_tag:
                    - 3
                    - 4
                network_type:
                    - ipv4
                    - ipv6
                connect_type:
                    - ssl
                    - tcp

        steps:
            - name: install docker-compose
              run: |
                sudo curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
            - uses: actions/checkout@v1
            - name: run test cases
              env:
                  MONGO_TAG: ${{ matrix.mongo_tag }}
                  NETWORK_TYPE: ${{ matrix.network_type }}
                  CONNECT_TYPE: ${{ matrix.connect_type }}
              run: |
                set -e -u -x
                if [ "$NETWORK_TYPE" = "ipv6" ];then docker network create --driver bridge --ipv6 --subnet fd15:555::/64  tests_emqx_bridge --attachable; fi
                if [ "$CONNECT_TYPE" = "ssl" ]; then
                    docker-compose -f ./docker-compose-ssl.yml -p tests up -d
                    docker exec -i $(docker ps -a -f name=tests_erlang_1 -q) sh -c "echo 'auth.mongo.ssl = true' >> /emqx_auth_mongo/etc/emqx_auth_mongo.conf"
                    docker exec -i $(docker ps -a -f name=tests_erlang_1 -q) sh -c "echo 'auth.mongo.ssl_opts.cacertfile = /emqx_auth_mongo/test/emqx_auth_mongo_SUITE_data/ca.pem' >> /emqx_auth_mongo/etc/emqx_auth_mongo.conf"
                    docker exec -i $(docker ps -a -f name=tests_erlang_1 -q) sh -c "echo 'auth.mongo.ssl_opts.certfile = /emqx_auth_mongo/test/emqx_auth_mongo_SUITE_data/client-cert.pem' >> /emqx_auth_mongo/etc/emqx_auth_mongo.conf"
                    docker exec -i $(docker ps -a -f name=tests_erlang_1 -q) sh -c "echo 'auth.mongo.ssl_opts.keyfile = /emqx_auth_mongo/test/emqx_auth_mongo_SUITE_data/client-key.pem' >> /emqx_auth_mongo/etc/emqx_auth_mongo.conf"
                else
                    docker-compose -f ./docker-compose.yml -p tests up -d
                fi
                if [ "$NETWORK_TYPE" != "ipv6" ];then
                    docker exec -i $(docker ps -a -f name=tests_erlang_1 -q) sh -c "sed -i '/auth.mongo.server/c auth.mongo.server = mongo_server:27017' /emqx_auth_mongo/etc/emqx_auth_mongo.conf"
                else
                    ipv6_address=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.GlobalIPv6Address}}{{end}}' $(docker ps -a -f name=tests_mongo_server_1 -q))
                    docker exec -i $(docker ps -a -f name=tests_erlang_1 -q) sh -c "sed -i '/auth.mongo.server/c auth.mongo.server = $ipv6_address:27017' /emqx_auth_mongo/etc/emqx_auth_mongo.conf"
                fi
                docker exec -i tests_erlang_1 sh -c "make -C /emqx_auth_mongo xref"
                docker exec -i tests_erlang_1 sh -c "make -C /emqx_auth_mongo eunit"
                docker exec -i tests_erlang_1 sh -c "make -C /emqx_auth_mongo ct"
                docker exec -i tests_erlang_1 sh -c "make -C /emqx_auth_mongo cover"
            - uses: actions/upload-artifact@v1
              if: failure()
              with:
                name: logs_mongo${{ matrix.mongo_tag}}_${{ matrix.network_type }}
                path: _build/test/logs

